# Copyright (c) 2018 HarryR
# License: LGPL-3.0+
"""
Converts SHDL (Secure Hardware Definition Language) files generated by
the FairPlay SFDL compiler into the 'Extended Pinocchio' format usable
with EthSnarks.

Types of gates:

 * input
 * intermediate gate
 * output gate

There are a number of oddities which don't directly translate to the
Pinocchio format, especially with the unoptimised form of the circuit.

## Example 1:

	0 gate arity 0 table [0] inputs [] // false
	1 gate arity 0 table [1] inputs [] //true

These are affirmations, they affirm that the value of the wire is always
a specific value.

## Example 2:

	511 output gate arity 1 table [ 0 1 ] inputs [ 510 ]	//output$output.bob$0

This is equivalent to a pass-thru gate, it maps 0 to 0 and 1 to 1.

## Example 3:

	289 gate arity 1 table [ 1 0 ] inputs [ 2 ]

This is a 'not' gate, translated into a truth table.
"""

from __future__ import print_function
import re
import sys
from collections import namedtuple, OrderedDict


Gate = namedtuple('Gate', (
	'is_input',
	'is_output',
	'wire',
	'arity',
	'table',
	'inputs',
	'comment'))


def parse_gate(line, lineno):
	"""
	Convert a line of text into a parsed gate
	"""
	line = line.strip()
	m = re.match(r'^(?P<wire>[0-9]+) ((?P<is_output>output )?gate arity (?P<arity>[0-9]+) table \[\s(?P<table>([01]\s?)+)\] inputs \[\s(?P<inputs>[0-9]+\s)+\]|(?P<is_input>input))(?P<comment>\s*//.*)?$', line)
	if m is None:
		print("Error on line ", lineno)
		print("Line: ", line)
		return None

	comment = m.group('comment')
	if comment:
		comment = comment.strip()[2:]

	wire = int(m.group('wire'))

	is_input = m.group('is_input') == 'input'

	arity = m.group('arity')
	if arity is not None:
		arity = int(arity)

	table = m.group('table')
	if table:
		table = [int(_) for _ in table.split()]

	inputs = m.group('inputs')
	if inputs:
		inputs = [int(_) for _ in inputs.split()]

	is_output = m.group('is_output') == 'output '

	if not is_input:
		if len(table) != 1<<arity:
			print("Error on line ", lineno)
			print("Line: ", line)
			print("Expected table of %d bits for arity %d, got table of %d bits instead!", 1<<arity, arity, len(table))
			return None

	return Gate(
		is_input,
		is_output,
		wire,
		arity,
		table,
		inputs,
		comment)


def parse_wires(file_handle):
	"""
	Given a Secure Hardware Definition Language circuit file
	Return an ordered dictionary of all wires mapped to their gates
	"""
	wires = OrderedDict()

	for lineno, line in enumerate(file_handle):
		parsed = parse_gate(line, lineno)
		if not parsed:
			return 2

		if parsed.wire in wires:
			print("Error on line ", lineno)
			print("Line: ", line)
			print("Duplicate wire: ", parsed.wire)
			return 3

		wires[parsed.wire] = parsed

	return wires


def main(args):
	if len(args) < 1:
		print("Usage: shdl2ethsnarks.py <file.circuit> <file.fmt>")
		return 1

	with open(args[0], 'r') as handle:
		wires = parse_wires(handle)

	print(wires)


if __name__ == "__main__":
	sys.exit(main(sys.argv[1:]))
